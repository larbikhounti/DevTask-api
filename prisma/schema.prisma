// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// priority enum 0: Low, 1: Medium, 2: High
enum Priority {
  Low
  Medium
  High
}

model Users {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  name  String
  password String
  refreshToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks tasks[]
  clients clients[]
}

model tasks {
  id          Int      @default(autoincrement()) @id
  title       String
  description String
  completed   Boolean  @default(false)
  userId     Int
  estimatedTime Int?
  deadline    DateTime?
  priority    Priority @default(Low)
  currentTimerSeconds Int  @default(0)
  isTimerEnabled Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user       Users     @relation(fields: [userId], references: [id])
  projectId   Int
  project     projects  @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model clients {
  id          Int      @default(autoincrement()) @id
  name        String
  email       String   @unique
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  projects    projects[]
  userId     Int
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model projects {
  id          Int      @default(autoincrement()) @id
  name        String
  description String?
  clientId    Int
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      clients   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tasks       tasks[]
}


